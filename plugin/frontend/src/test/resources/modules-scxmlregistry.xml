<?xml version="1.0" encoding="UTF-8"?><sv:node xmlns:sv="http://www.jcp.org/jcr/sv/1.0" xmlns:esv="http://www.onehippo.org/jcr/xmlimport" sv:name="scxmlregistry" esv:merge="combine">
    <sv:node sv:name="hippo:moduleconfig" esv:merge="combine">
        <sv:node sv:name="hipposcxml:definitions" esv:merge="combine">
            <sv:node sv:name="documentworkflow" esv:merge="combine">
                <sv:property sv:name="hipposcxml:source" sv:type="String" esv:merge="override">
                    <sv:value>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&#xd;
                        &lt;!--&#xd;
                        Copyright 2013-2014 Hippo B.V. (http://www.onehippo.com)&#xd;
                        &#xd;
                        Licensed under the Apache License, Version 2.0 (the "License");&#xd;
                        you may not use this file except in compliance with the License.&#xd;
                        You may obtain a copy of the License at&#xd;
                        &#xd;
                        http://www.apache.org/licenses/LICENSE-2.0&#xd;
                        &#xd;
                        Unless required by applicable law or agreed to in writing, software&#xd;
                        distributed under the License is distributed on an "AS IS" BASIS,&#xd;
                        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xd;
                        See the License for the specific language governing permissions and&#xd;
                        limitations under the License.&#xd;
                        --&gt;&#xd;
                        &lt;scxml version="1.0"&#xd;
                        xmlns="http://www.w3.org/2005/07/scxml"&#xd;
                        xmlns:hippo="http://www.onehippo.org/cms7/repository/scxml"&#xd;
                        xmlns:cs="http://commons.apache.org/scxml"&gt;&#xd;
                        &#xd;
                        &lt;script&gt;&#xd;
                        def getScxmlId() { workflowContext.scxmlId }&#xd;
                        // draft variant property method&#xd;
                        def getDraft() { workflowData.documents['draft'] }&#xd;
                        // unpublished variant property method&#xd;
                        def getUnpublished() { workflowData.documents['unpublished'] }&#xd;
                        // published variant property method&#xd;
                        def getPublished() { workflowData.documents['published'] }&#xd;
                        // current user property method&#xd;
                        def getUser() { workflowContext.user }&#xd;
                        // current requests map property method&#xd;
                        def getRequests() { workflowData.requests }&#xd;
                        // returns the variant for copying and checking copy access privileges&#xd;
                        def getCopySource() { published ?: unpublished ?: null }&#xd;
                        // returns the variant for deleting and checking delete privileges&#xd;
                        def getDeleteSource() { unpublished ?: published ?: draft }&#xd;
                        // returns the current draft holder (editor) if defined (and draft exists)&#xd;
                        def getHolder() { draft?.holder }&#xd;
                        // true if draft exists and currently being edited&#xd;
                        def boolean isEditing() { !!holder }&#xd;
                        // true if draft exists and edited by current user&#xd;
                        def boolean isEditor() { holder == user }&#xd;
                        // true if draft exists and not currently editor or edited by current user&#xd;
                        def boolean isEditable() { !holder or editor }&#xd;
                        // true if published variant exists with availability 'live'&#xd;
                        def boolean isLive() { published?.isAvailable('live') }&#xd;
                        // true if unpublished variant exists with availability 'preview'&#xd;
                        def boolean isPreview() { unpublished?.isAvailable('preview') }&#xd;
                        // true if either unpublished or published variant exits with availability 'preview'&#xd;
                        def boolean isPreviewAvailable() { unpublished?.isAvailable('preview') or published?.isAvailable('preview') }&#xd;
                        // true if unpublished variant exists and no published variant exists with availability 'live'&#xd;
                        //                                        or they have a different lastModified&#xd;
                        def boolean isModified() { unpublished and (!live or unpublished.lastModified!=published.lastModified) }&#xd;
                        // true if there is an outstanding workflow request&#xd;
                        def boolean isRequestPending() { workflowData.requestPending }&#xd;
                        def getContainingFolder() { workflowData.handle.parent }&#xd;
                        &lt;/script&gt;&#xd;
                        &#xd;
                        &lt;!-- the initial no-document state is used to prevent entering the handle state if there is no document --&gt;&#xd;
                        &lt;state id="no-document"&gt;&#xd;
                        &lt;!-- automatic transition to and continue in parallel handle state only when a document variant exists --&gt;&#xd;
                        &lt;transition target="handle" cond="!workflowData.documents.isEmpty()"/&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;parallel id="handle"&gt;&#xd;
                        &#xd;
                        &lt;!-- the atomic status state is used to report several statuses and info feedback to the invoking workflow --&gt;&#xd;
                        &lt;state id="status"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;hippo:feedback key="status" value="editable"/&gt;&#xd;
                        &lt;hippo:feedback key="isLive" value="live"/&gt;&#xd;
                        &lt;hippo:feedback key="previewAvailable" value="previewAvailable"/&gt;&#xd;
                        &lt;!-- enable the checkModified operation if both draft and unpublished variants exists --&gt;&#xd;
                        &lt;hippo:action action="checkModified" enabledExpr="draft and unpublished"/&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition on event checkModified to compare the draft and unpublished variants which result is&#xd;
                        reported back as Boolean value through the 'modified' feedback variable and the workflow operation result --&gt;&#xd;
                        &lt;transition event="checkModified"&gt;&#xd;
                        &lt;hippo:isModified/&gt;&#xd;
                        &lt;hippo:result value="workflowContext.feedback['modified']"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the composite edit state is used to manage all operations for editing a draft variant --&gt;&#xd;
                        &lt;state id="edit"&gt;&#xd;
                        &#xd;
                        &lt;!-- default no-edit state initially disables all editing operations --&gt;&#xd;
                        &lt;state id="no-edit"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;hippo:action action="disposeEditableInstance" enabledExpr="false"/&gt;&#xd;
                        &lt;hippo:action action="obtainEditableInstance" enabledExpr="false"/&gt;&#xd;
                        &lt;hippo:action action="commitEditableInstance" enabledExpr="false"/&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &lt;!-- event-less transition to state "editing" if there is no pending request and the draft variant is edited --&gt;&#xd;
                        &lt;transition target="editing"  cond="!requestPending and editing"/&gt;&#xd;
                        &lt;!-- (else) event-less transition to state "editable" if there is no pending request and the draft variant&#xd;
                        doesn't exist yet or isn't edited --&gt;&#xd;
                        &lt;transition target="editable" cond="!requestPending"/&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- editing state becomes active when the draft variant is currently edited --&gt;&#xd;
                        &lt;state id="editing"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;if cond="editor"&gt;&#xd;
                        &lt;!-- current editor is allowed all editing operations --&gt;&#xd;
                        &lt;hippo:action action="disposeEditableInstance" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="obtainEditableInstance" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="commitEditableInstance" enabledExpr="true"/&gt;&#xd;
                        &lt;else/&gt;&#xd;
                        &lt;!-- for a not-current editor the current editor (holder) is reported through the 'inUseBy' feedback --&gt;&#xd;
                        &lt;hippo:feedback key="inUseBy" value="holder"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="!editor and workflowContext.isGranted(draft,'hippo:admin')"&gt;&#xd;
                        &lt;!-- For an admin (granted hippo:admin) enable the unlock operation if not-current editor --&gt;&#xd;
                        &lt;hippo:action action="unlock" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- editable state becomes active if editing is possible but there is no current editor --&gt;&#xd;
                        &lt;state id="editable"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(draft,'hippo:admin')"&gt;&#xd;
                        &lt;!-- for an admin (granted hippo:admin) report the unlock operation as available but disabled --&gt;&#xd;
                        &lt;hippo:action action="unlock" enabledExpr="false"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;!-- enable the operation to start editing --&gt;&#xd;
                        &lt;hippo:action action="obtainEditableInstance" enabledExpr="true"/&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to 'dispose' an editable instance by (only) removing the current draft holder, and the&#xd;
                        current unpublished document variant is returned if currently in preview state else the published variant --&gt;&#xd;
                        &lt;transition event="disposeEditableInstance"&gt;&#xd;
                        &lt;!-- remove holder from the draft document --&gt;&#xd;
                        &lt;hippo:setHolder holder="null"/&gt;&#xd;
                        &lt;hippo:result value="preview ? unpublished : published"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to 'obtain' an editable draft document variant by creating or updating a draft variant&#xd;
                        by copying (the contents of) the current unpublished variant if available or else the published variant --&gt;&#xd;
                        &lt;transition event="obtainEditableInstance"&gt;&#xd;
                        &lt;if cond="!!unpublished"&gt;&#xd;
                        &lt;!-- unpublished document exists: copy it to draft first --&gt;&#xd;
                        &lt;hippo:copyVariant sourceState="unpublished" targetState="draft"/&gt;&#xd;
                        &lt;elseif cond="!!published"/&gt;&#xd;
                        &lt;!-- else if published document exists: copy it to draft first --&gt;&#xd;
                        &lt;hippo:copyVariant sourceState="published" targetState="draft"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;!-- mark the draft document as modified, set the user as editor and remove possibly copied availabilities --&gt;&#xd;
                        &lt;hippo:configVariant variant="draft" applyModified="true" setHolder="true" availabilities=""/&gt;&#xd;
                        &lt;!-- store the newly created or updated draft document as result --&gt;&#xd;
                        &lt;hippo:result value="draft"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to 'commit' an editable instance by removing the holder and, if new or modified,&#xd;
                        copying its content to the unpublished variant --&gt;&#xd;
                        &lt;transition event="commitEditableInstance"&gt;&#xd;
                        &lt;hippo:setHolder holder="null"/&gt;&#xd;
                        &lt;if cond="!!unpublished"&gt;&#xd;
                        &lt;!-- if unpublished variant exist only 'commit' changes if there are any --&gt;&#xd;
                        &lt;hippo:isModified/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="!unpublished or workflowContext.feedback['modified']"&gt;&#xd;
                        &lt;!-- we either have a new draft (no unpublished) or the draft is modified compared to the unpublished --&gt;&#xd;
                        &lt;if cond="!unpublished and !!published"&gt;&#xd;
                        &lt;!-- we have no unpublished variant yet but do have a published variant:&#xd;
                        remove possible 'preview' availability from the published variant --&gt;&#xd;
                        &lt;if cond="live"&gt;&#xd;
                        &lt;hippo:configVariant variant="published" availabilities="live"/&gt;&#xd;
                        &lt;else/&gt;&#xd;
                        &lt;hippo:configVariant variant="published" availabilities=""/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;!-- copy the new or modified draft variant to the unpublished variant, creating it if needed --&gt;&#xd;
                        &lt;hippo:copyVariant sourceState="draft" targetState="unpublished"/&gt;&#xd;
                        &lt;!-- configure the new or updated unpublished to be versionable, modified and available as 'preview' --&gt;&#xd;
                        &lt;hippo:configVariant variant="unpublished" versionable="true" applyModified="true" availabilities="preview"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;!-- return the possibly updated unpublished variant --&gt;&#xd;
                        &lt;hippo:result value="unpublished"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to 'unlock' the current edited draft variant by overriding its current holder&#xd;
                        with that of the current invoking admin (granted hippo:admin) user. --&gt;&#xd;
                        &lt;transition event="unlock"&gt;&#xd;
                        &lt;hippo:setHolder holder="user"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the composite request state is used to manage all workflow operations on existing document workflow requests --&gt;&#xd;
                        &lt;state id="request"&gt;&#xd;
                        &#xd;
                        &lt;!-- the initial no-request state is used and active when there are no current document workflow requests --&gt;&#xd;
                        &lt;state id="no-request"&gt;&#xd;
                        &lt;!-- event-less transition to state "requested" when requests exists --&gt;&#xd;
                        &lt;transition target="requested" cond="!empty(requests)"/&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the requested state becomes active when document workflow requests are present --&gt;&#xd;
                        &lt;state id="requested"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;foreach item="request" array="requests.values()"&gt;&#xd;
                        &lt;!-- for all requests determine the available request actions and report them through the special 'requests'&#xd;
                        feedback map variable --&gt;&#xd;
                        &lt;!-- for document workflow requests: --&gt;&#xd;
                        &lt;if cond="request.workflowRequest"&gt;&#xd;
                        &lt;if cond="!request.owner or request.owner==user"&gt;&#xd;
                        &lt;!-- if request owner or no request owner: enable cancel operation --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="cancelRequest" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="rejectReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="acceptReview" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &#xd;
                        &lt;!-- todo comment more--&gt;&#xd;
                        &lt;if cond="request.getStringProperty('jcr:primaryType')=='threestep:request'"&gt;&#xd;
                        &lt;!-- scheduled workflow operation --&gt;&#xd;
                        &lt;!-- todo--&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(request, 'reviewer')"&gt;&#xd;
                        &lt;!-- editor users (granted hippo:editor) may reject and accept as well as cancel requests --&gt;&#xd;
                        &lt;!--&lt;if cond="request.threeStepType=='review' and request.workflowType!='rejected'"&gt;--&gt;&#xd;
                        &lt;if cond="request.getStringProperty('threestep:type')=='review' and request.workflowType!='rejected'"&gt;&#xd;
                        &lt;!-- if request for delete: enable accept operation if not live and not editing --&gt;&#xd;
                        &lt;hippo:action action="acceptReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="rejectReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptReview" enabledExpr="true"/&gt;&#xd;
                        &lt;if cond="request.workflowType!='rejected'"&gt;&#xd;
                        &lt;!-- if request not rejected yet, enable reject operation --&gt;&#xd;
                        &lt;hippo:action action="rejectReview" enabledExpr="!live and !editing"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="rejectReview" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(request, 'hippo:editor')"&gt;&#xd;
                        &lt;if cond="request.threeStepType=='publish'"&gt;&#xd;
                        &lt;!-- editor users (granted hippo:editor) may reject and accept as well as cancel requests --&gt;&#xd;
                        &lt;if cond="request.workflowType!='rejected'"&gt;&#xd;
                        &lt;!-- if request not rejected yet, enable reject operation --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="rejectRequest" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="request.workflowType=='delete'"&gt;&#xd;
                        &lt;!-- if request for delete: enable accept operation if not live and not editing --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptRequest" enabledExpr="!live and !editing"/&gt;&#xd;
                        &lt;elseif cond="request.workflowType=='publish'"&gt;&#xd;
                        &lt;!-- if request for publish: enable accept operation if modified and not editing --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptRequest" enabledExpr="modified and !editing"/&gt;&#xd;
                        &lt;/elseif&gt;&#xd;
                        &lt;elseif cond="request.workflowType=='depublish'"/&gt;&#xd;
                        &lt;!-- if request for depublish: enable accept operation if live and not editing --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptRequest" enabledExpr="live and !editing"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="!request.owner or request.owner==user"&gt;&#xd;
                        &lt;!-- if request owner or no request owner: enable cancel operation --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="cancelRequest" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="rejectReview" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;!-- when not an editor user (not granted hippo:editor) then: --&gt;&#xd;
                        &lt;elseif cond="request?.owner==user"/&gt;&#xd;
                        &lt;!-- if request owner: enable cancel operation --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="cancelRequest" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="rejectReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptReview" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="request.threeStepType=='review'"&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="cancelRequest" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="rejectReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptReview" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;!-- / todo--&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="request.getStringProperty('jcr:primaryType')=='hippostdpubwf:request'"&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(request, 'hippo:editor')"&gt;&#xd;
                        &lt;!-- editor users (granted hippo:editor) may reject and accept as well as cancel requests --&gt;&#xd;
                        &lt;if cond="request.workflowType!='rejected'"&gt;&#xd;
                        &lt;!-- if request not rejected yet, enable reject operation --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="rejectRequest" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="request.workflowType=='delete'"&gt;&#xd;
                        &lt;!-- if request for delete: enable accept operation if not live and not editing --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptRequest" enabledExpr="!live and !editing"/&gt;&#xd;
                        &lt;elseif cond="request.workflowType=='publish'"&gt;&#xd;
                        &lt;!-- if request for publish: enable accept operation if modified and not editing --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptRequest" enabledExpr="modified and !editing"/&gt;&#xd;
                        &lt;/elseif&gt;&#xd;
                        &lt;elseif cond="request.workflowType=='depublish'"/&gt;&#xd;
                        &lt;!-- if request for depublish: enable accept operation if live and not editing --&gt;&#xd;
                        &lt;!--&lt;hippo:requestAction identifierExpr="request.identity" action="acceptRequest" enabledExpr="true"/&gt;--&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptRequest" enabledExpr="live and !editing"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="!request.owner or request.owner==user"&gt;&#xd;
                        &lt;!-- if request owner or no request owner: enable cancel operation --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="cancelRequest" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="rejectReview" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;!-- when not an editor user (not granted hippo:editor) then: --&gt;&#xd;
                        &lt;elseif cond="request?.owner==user"/&gt;&#xd;
                        &lt;!-- if request owner: enable cancel operation --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="cancelRequest" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="rejectReview" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;!-- scheduled workflow operation --&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="request.scheduledRequest"&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(request, 'hippo:editor')"&gt;&#xd;
                        &lt;!-- if request owner: enable cancel operation --&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="cancelRequest" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="acceptReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:requestAction identifierExpr="request.identity" action="rejectReview" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/foreach&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &lt;!-- target-less transition to 'accept' a specific request --&gt;&#xd;
                        &lt;transition event="acceptReview"&gt;&#xd;
                        &lt;!-- define temporary request variable for the event payload request parameter --&gt;&#xd;
                        &lt;cs:var name="request" expr="_event.data?.request"/&gt;&#xd;
                        &lt;!-- store the request workflow type as temporary variable --&gt;&#xd;
                        &lt;hippo:acceptReview requestExpr="request" reviewer="user" /&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to 'accept' a specific request --&gt;&#xd;
                        &lt;transition event="acceptRequest"&gt;&#xd;
                        &#xd;
                        &lt;!-- define temporary request variable for the event payload request parameter --&gt;&#xd;
                        &lt;cs:var name="request" expr="_event.data?.request"/&gt;&#xd;
                        &lt;!-- store the request workflow type as temporary variable --&gt;&#xd;
                        &lt;cs:var name="workflowType" expr="request.workflowType"/&gt;&#xd;
                        &lt;!-- store the request targetDate as temporary variable --&gt;&#xd;
                        &lt;cs:var name="targetDate" expr="request.scheduledDate"/&gt;&#xd;
                        &#xd;
                        &lt;!-- First delete the request itself.&#xd;
                        Note: After this, the request object no longer can be accessed!&#xd;
                        Which is why we need to define the temporary variables workflowType and targetDate above.&#xd;
                        --&gt;&#xd;
                        &lt;hippo:deleteRequest requestExpr="request"/&gt;&#xd;
                        &#xd;
                        &lt;if cond="!targetDate"&gt;&#xd;
                        &lt;!-- the request didn't have a targetDate defined, simply trigger the "workflowType" value as event --&gt;&#xd;
                        &lt;send event="workflowType"/&gt;&#xd;
                        &lt;!-- log the workflowType after it has been processed --&gt;&#xd;
                        &lt;send event="'logEvent.'+workflowType"/&gt;&#xd;
                        &lt;else/&gt;&#xd;
                        &lt;!-- the request did have a targetDate: trigger a 'scheduled' workflow action event --&gt;&#xd;
                        &lt;send event="workflowType" namelist="targetDate"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to 'reject' a request --&gt;&#xd;
                        &lt;transition event="rejectRequest"&gt;&#xd;
                        &lt;!-- update the specific request to type rejected with an optional reason, using the event payload&#xd;
                        'request' and optional 'reason' parameters --&gt;&#xd;
                        &lt;hippo:rejectRequest requestExpr="_event.data?.request" reasonExpr="_event.data?.reason"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to 'reject' a request --&gt;&#xd;
                        &lt;transition event="rejectReview"&gt;&#xd;
                        &lt;!-- update the specific request to type rejected with an optional reason, using the event payload&#xd;
                        'request' and optional 'reason' parameters --&gt;&#xd;
                        &lt;hippo:rejectRequest requestExpr="_event.data?.request" reasonExpr="_event.data?.reason"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to 'cancel' a request --&gt;&#xd;
                        &lt;transition event="cancelRequest"&gt;&#xd;
                        &lt;!-- delete the specific request using the event payload 'request' parameter --&gt;&#xd;
                        &lt;hippo:deleteRequest requestExpr="_event.data?.request"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the composite publish state is used to manage workflow operations for publishing a document --&gt;&#xd;
                        &lt;state id="publish"&gt;&#xd;
                        &#xd;
                        &lt;!-- the initial no-publish state is used and active to indicate publish operations are currently not&#xd;
                        allowed or possible because the document is being edited or not (yet) modified --&gt;&#xd;
                        &lt;state id="no-publish"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;!-- by default report the request publication operation as available but disabled --&gt;&#xd;
                        &lt;hippo:action action="requestPublication" enabledExpr="false"/&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(unpublished ?: published ?: draft, 'hippo:editor')"&gt;&#xd;
                        &lt;!-- if editor user (granted hippo:editor) by default report the publish operation as available but disabled --&gt;&#xd;
                        &lt;hippo:action action="publish" enabledExpr="false"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &lt;!-- event-less transition to publishable state if not currently editing and the document is modified --&gt;&#xd;
                        &lt;transition target="publishable" cond="!editing and modified"/&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &lt;!-- state publishable is active when the  document is modified and not currently edited --&gt;&#xd;
                        &lt;state id="publishable"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;if cond="!requestPending or user=='system'"&gt;&#xd;
                        &lt;!-- if no request pending OR invoked by the 'system' user (scheduled workflow jobs daemon):&#xd;
                        enable request publication operation --&gt;&#xd;
                        &#xd;
                        &lt;if cond="workflowContext.isGranted(unpublished, 'hippo:author')"&gt;&#xd;
                        &lt;!-- if (also) editor user (granted hippo:author): enable publish operation --&gt;&#xd;
                        &lt;hippo:action action="requestReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="acceptReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="rejectReview" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="requestPublication" enabledExpr="false"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(unpublished, 'reviewer')"&gt;&#xd;
                        &lt;!-- if (also) editor user (granted hippo:author): enable publish operation --&gt;&#xd;
                        &lt;hippo:action action="requestPublication" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(unpublished, 'hippo:editor')"&gt;&#xd;
                        &lt;!-- if (also) editor user (granted hippo:editor): enable publish operation --&gt;&#xd;
                        &lt;hippo:action action="publish" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to create a publish request when no event payload parameter targetDate is provided --&gt;&#xd;
                        &lt;transition event="requestReview" cond="!_event.data?.targetDate"&gt;&#xd;
                        &lt;hippo:requestReview type="publish" threeStepType="review" contextVariantExpr="unpublished"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to create a scheduledpublish request at the required event payload parameter targetDate --&gt;&#xd;
                        &lt;transition event="requestReview" cond="!!_event.data?.targetDate"&gt;&#xd;
                        &lt;hippo:requestReview type="scheduledpublish" threeStepType="review" contextVariantExpr="unpublished" targetDateExpr="_event.data?.targetDate"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to create a publish request when no event payload parameter targetDate is provided --&gt;&#xd;
                        &lt;transition event="requestPublication" cond="!_event.data?.targetDate"&gt;&#xd;
                        &lt;!--&lt;hippo:requestReview type="publish" threeStepType="review" contextVariantExpr="unpublished"/&gt;--&gt;&#xd;
                        &lt;hippo:workflowRequest type="publish" contextVariantExpr="unpublished"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to create a scheduledpublish request at the required event payload parameter targetDate --&gt;&#xd;
                        &lt;transition event="requestPublication" cond="!!_event.data?.targetDate"&gt;&#xd;
                        &lt;hippo:workflowRequest type="scheduledpublish" contextVariantExpr="unpublished" targetDateExpr="_event.data?.targetDate"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to publish the document when no event payload parameter targetDate is provided --&gt;&#xd;
                        &lt;transition event="publish" cond="!_event.data?.targetDate"&gt;&#xd;
                        &lt;!-- copy the content of the unpublished variant to the published variant --&gt;&#xd;
                        &lt;hippo:copyVariant sourceState="unpublished" targetState="published"/&gt;&#xd;
                        &lt;!-- mark the published variant as published and set its availability to (only) 'live' --&gt;&#xd;
                        &lt;hippo:configVariant variant="published" applyPublished="true" availabilities="live"/&gt;&#xd;
                        &lt;!-- create a JCR version of the published document via the unpublished variant --&gt;&#xd;
                        &lt;hippo:version variant="unpublished"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to schedule the publication of the document at the required event payload parameter targetDate --&gt;&#xd;
                        &lt;transition event="publish" cond="!!_event.data?.targetDate"&gt;&#xd;
                        &lt;hippo:scheduleWorkflow type="publish" targetDateExpr="_event.data?.targetDate"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the composite depublish state is used to manage workflow operations for depublishing a document --&gt;&#xd;
                        &lt;state id="depublish"&gt;&#xd;
                        &#xd;
                        &lt;!-- the initial no-depublish state is used and active to indicate depublish operations are currently not&#xd;
                        allowed or possible because the document is being edited or not 'live' --&gt;&#xd;
                        &lt;state id="no-depublish"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;!-- by default report the request depublication operation as available but disabled --&gt;&#xd;
                        &lt;hippo:action action="requestDepublication" enabledExpr="false"/&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(published ?: unpublished ?: draft, 'hippo:editor')"&gt;&#xd;
                        &lt;!-- if editor user (granted hippo:editor) by default report the depublish operation as available but disabled --&gt;&#xd;
                        &lt;hippo:action action="depublish" enabledExpr="false"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &lt;!-- event-less transition to depublishable state if not currently editing and the document is 'live' --&gt;&#xd;
                        &lt;transition target="depublishable" cond="!editing and live"/&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- state depublishable is active when the  document is live and not currently edited --&gt;&#xd;
                        &lt;state id="depublishable"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;if cond="!requestPending or user=='system'"&gt;&#xd;
                        &lt;!-- if no request pending OR invoked by the 'system' user (scheduled workflow jobs daemon):&#xd;
                        enable request depublication operation --&gt;&#xd;
                        &lt;hippo:action action="requestDepublication" enabledExpr="true"/&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(published, 'hippo:editor')"&gt;&#xd;
                        &lt;!-- if (also) editor user (granted hippo:editor): enable publish operation --&gt;&#xd;
                        &lt;hippo:action action="depublish" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to create a depublish request when no event payload parameter targetDate is provided --&gt;&#xd;
                        &lt;transition event="requestDepublication" cond="!_event.data?.targetDate"&gt;&#xd;
                        &lt;hippo:workflowRequest type="depublish" contextVariantExpr="published"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to create a scheduleddepublish request at the required event payload parameter targetDate --&gt;&#xd;
                        &lt;transition event="requestDepublication" cond="!!_event.data?.targetDate"&gt;&#xd;
                        &lt;hippo:workflowRequest type="scheduleddepublish" contextVariantExpr="published" targetDateExpr="_event.data?.targetDate"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to depublish the document when no event payload parameter targetDate is provided --&gt;&#xd;
                        &lt;transition event="depublish" cond="!_event.data?.targetDate"&gt;&#xd;
                        &lt;if cond="!unpublished"&gt;&#xd;
                        &lt;!-- if no unpublished variant exists yet, copy it from the published variant --&gt;&#xd;
                        &lt;hippo:copyVariant sourceState="published" targetState="unpublished"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;!-- ensure the unpublished variant to be versionable set its availability to (only) 'live' --&gt;&#xd;
                        &lt;hippo:configVariant variant="unpublished" versionable="true" availabilities="preview"/&gt;&#xd;
                        &lt;!-- remove all availabilities from the published variant --&gt;&#xd;
                        &lt;hippo:configVariant variant="published" availabilities=""/&gt;&#xd;
                        &lt;!-- create an extra version of the current unpublished (possibly modified?) --&gt;&#xd;
                        &lt;hippo:version variant="unpublished"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to schedule the depublication of the document at the required event payload parameter targetDate --&gt;&#xd;
                        &lt;transition event="depublish" cond="!!_event.data?.targetDate"&gt;&#xd;
                        &lt;hippo:scheduleWorkflow type="depublish" targetDateExpr="_event.data?.targetDate"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the composite versioning state is used to manage versioning related workflow operations of a document --&gt;&#xd;
                        &lt;state id="versioning"&gt;&#xd;
                        &#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;!-- always enable the listVersions, even if no version is available (yet) --&gt;&#xd;
                        &lt;hippo:action action="listVersions" enabledExpr="true"/&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to report a list of available versions of the document --&gt;&#xd;
                        &lt;transition event="listVersions"&gt;&#xd;
                        &lt;hippo:listVersions variant="unpublished" /&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- the initial no-versioning state is used and active to indicate versioning operations are currently not&#xd;
                        allowed or possible because there is no unpublished document variant yet --&gt;&#xd;
                        &lt;state id="no-versioning"&gt;&#xd;
                        &lt;!-- event-less transition to versionable state when an unpublished document variant exists --&gt;&#xd;
                        &lt;transition target="versionable" cond="!!unpublished"/&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the versionable state becomes active when an unpublished document variant exists --&gt;&#xd;
                        &lt;state id="versionable"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;!-- enable the retrieveVersion operation --&gt;&#xd;
                        &lt;hippo:action action="retrieveVersion" enabledExpr="true"/&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(unpublished, 'hippo:editor')"&gt;&#xd;
                        &lt;!-- if the user is editor (granted hippo:editor) also enable the other versioning operations --&gt;&#xd;
                        &lt;hippo:action action="version" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="restoreVersion" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="versionRestoreTo" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to create a new version for the current unpublished variant --&gt;&#xd;
                        &lt;transition event="version"&gt;&#xd;
                        &lt;hippo:version variant="unpublished"  /&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to retrieve a specific version created on the event payload provided date parameter --&gt;&#xd;
                        &lt;transition event="retrieveVersion"&gt;&#xd;
                        &lt;hippo:retrieveVersion historic="_event.data?.date" variant="unpublished" /&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to restore a specific version from the event payload provided parameter date to the&#xd;
                        payload provided parameter target (document).&#xd;
                        Note: this uses custom/manual copying of the version contents, unlike the restoreVersion operation below --&gt;&#xd;
                        &lt;transition event="versionRestoreTo"&gt;&#xd;
                        &lt;hippo:versionRestoreTo historic="_event.data?.date" variant="unpublished" target="_event.data?.target"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to restore a specific document version from the event payload provided parameter date.&#xd;
                        Note: this uses standard JCR version restore unlike the versionRestoreTo operation above --&gt;&#xd;
                        &lt;transition event="restoreVersion"&gt;&#xd;
                        &lt;hippo:restoreVersion historic="_event.data?.date"  variant="unpublished" /&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the composite terminate state is used to manage termination and related/similar workflow operations like&#xd;
                        move and rename --&gt;&#xd;
                        &lt;state id="terminate"&gt;&#xd;
                        &#xd;
                        &lt;!-- the initial no-terminate state is used and active when delete/move/rename operations are currently now&#xd;
                        allowed or possible --&gt;&#xd;
                        &lt;state id="no-terminate"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;!-- report request delete operation as available but default disabled --&gt;&#xd;
                        &lt;hippo:action action="requestDelete" enabledExpr="false"/&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(deleteSource, 'hippo:editor') and workflowContext.isGranted(containingFolder, 'jcr:write')"&gt;&#xd;
                        &lt;!-- if the user is editor (granted hippo:editor) AND allowed to modify (jcr:write) the document folder,&#xd;
                        report the delete/move/rename operations as available but default disabled --&gt;&#xd;
                        &lt;hippo:action action="delete" enabledExpr="false"/&gt;&#xd;
                        &lt;hippo:action action="move" enabledExpr="false"/&gt;&#xd;
                        &lt;hippo:action action="rename" enabledExpr="false"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &lt;!-- event-less transition to terminatable state if the document is not live and not being edited --&gt;&#xd;
                        &lt;transition target="terminateable" cond="!live and !editing"/&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the terminateable state becomes active when the document is not live and not being edited --&gt;&#xd;
                        &lt;state id="terminateable"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;if cond="!requestPending"&gt;&#xd;
                        &lt;!-- delete operations are only allowed when (also) no request is pending --&gt;&#xd;
                        &lt;!-- (then) always enable the request delete operation --&gt;&#xd;
                        &lt;hippo:action action="requestDelete" enabledExpr="true"/&gt;&#xd;
                        &lt;if cond="workflowContext.isGranted(deleteSource, 'hippo:editor') and workflowContext.isGranted(containingFolder, 'jcr:write')"&gt;&#xd;
                        &lt;!-- if the user is editor (granted hippo:editor) AND allowed to modify (jcr:write) the document folder,&#xd;
                        enable the delete/move/rename operations --&gt;&#xd;
                        &lt;hippo:action action="delete" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="move" enabledExpr="true"/&gt;&#xd;
                        &lt;hippo:action action="rename" enabledExpr="true"/&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/if&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to create a delete request --&gt;&#xd;
                        &lt;transition event="requestDelete"&gt;&#xd;
                        &lt;hippo:workflowRequest type="delete" contextVariantExpr="deleteSource"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- transition to delete the current document and go to final state terminated --&gt;&#xd;
                        &lt;transition event="delete" target="terminated"&gt;&#xd;
                        &lt;hippo:archiveDocument/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- transition to move the current document and go to final state terminated --&gt;&#xd;
                        &lt;transition event="move" target="terminated"&gt;&#xd;
                        &lt;hippo:moveDocument destinationExpr="_event.data?.destination" newNameExpr="_event.data?.name"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;!-- transition to rename the current document and go to final state terminated --&gt;&#xd;
                        &lt;transition event="rename" target="terminated"&gt;&#xd;
                        &lt;hippo:renameDocument newNameExpr="_event.data?.name"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the composite copy state is used to manage the copy workflow operation --&gt;&#xd;
                        &lt;state id="copy"&gt;&#xd;
                        &#xd;
                        &lt;!-- the initial no-copy state is used and active when the user is not an editor (granted hippo:editor) --&gt;&#xd;
                        &lt;state id="no-copy"&gt;&#xd;
                        &lt;!-- event-less transition to copyable state when the user is an editor (granted hippo:editor) --&gt;&#xd;
                        &lt;transition target="copyable" cond="workflowContext.isGranted(copySource,'hippo:editor')"/&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the state copyable is only active for users which are editor (granted hippo:editor) --&gt;&#xd;
                        &lt;state id="copyable"&gt;&#xd;
                        &lt;onentry&gt;&#xd;
                        &lt;!-- always enable the copy operation --&gt;&#xd;
                        &lt;hippo:action action="copy" enabledExpr="true"/&gt;&#xd;
                        &lt;/onentry&gt;&#xd;
                        &#xd;
                        &lt;!-- target-less transition to copy the document to the event payload provided parameters destination and name --&gt;&#xd;
                        &lt;transition event="copy"&gt;&#xd;
                        &lt;hippo:copyDocument destinationExpr="_event.data?.destination" newNameExpr="_event.data?.name"/&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;!-- the simple and non-transitional logEvent state is used to log actions:&#xd;
                        such actions needs to be 'send' using an event name prefixed by 'logEvent.'&#xd;
                        the remainder of the event name will be logged as event action&#xd;
                        --&gt;&#xd;
                        &lt;state id="logEvent"&gt;&#xd;
                        &lt;transition event="logEvent.*"&gt;&#xd;
                        &lt;hippo:logEvent actionexpr="_event.name.substring('logEvent.'.length())" /&gt;&#xd;
                        &lt;/transition&gt;&#xd;
                        &lt;/state&gt;&#xd;
                        &#xd;
                        &lt;/parallel&gt;&#xd;
                        &#xd;
                        &lt;!-- the final terminated state is used when the document no longer exists, is renamed or moved --&gt;&#xd;
                        &lt;final id="terminated" /&gt;&#xd;
                        &#xd;
                        &lt;/scxml&gt;</sv:value>
                </sv:property>
                <sv:node sv:name="acceptReview">
                    <sv:property sv:name="jcr:primaryType" sv:type="Name">
                        <sv:value>hipposcxml:action</sv:value>
                    </sv:property>
                    <sv:property sv:name="hipposcxml:classname" sv:type="String">
                        <sv:value>org.onehippo.threestep.cms.workflow.scxml.AcceptReviewAction</sv:value>
                    </sv:property>
                    <sv:property sv:name="hipposcxml:namespace" sv:type="String">
                        <sv:value>http://www.onehippo.org/cms7/repository/scxml</sv:value>
                    </sv:property>
                </sv:node>
                <sv:node sv:name="requestReview">
                    <sv:property sv:name="jcr:primaryType" sv:type="Name">
                        <sv:value>hipposcxml:action</sv:value>
                    </sv:property>
                    <sv:property sv:name="hipposcxml:classname" sv:type="String">
                        <sv:value>org.onehippo.threestep.cms.workflow.scxml.RequestReviewAction</sv:value>
                    </sv:property>
                    <sv:property sv:name="hipposcxml:namespace" sv:type="String">
                        <sv:value>http://www.onehippo.org/cms7/repository/scxml</sv:value>
                    </sv:property>
                </sv:node>
            </sv:node>
        </sv:node>
    </sv:node>
</sv:node>
